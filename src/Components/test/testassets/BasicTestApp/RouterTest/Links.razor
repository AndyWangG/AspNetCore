@using Microsoft.AspNetCore.Components.Routing
@inject NavigationManager NavigationManager
<style type="text/css">
    a.active {
        background-color: yellow;
        font-weight: bold;
    }
</style>
<ul>
    <li><NavLink href="/subdir/" Match=NavLinkMatch.All>Default (matches all)</NavLink></li>
    <li><NavLink href="" Match=NavLinkMatch.All>Default with base-relative URL (matches all)</NavLink></li>
    <li><NavLink href="/subdir/?abc=123">Default with query</NavLink></li>
    <li><NavLink href="/subdir/#blah">Default with hash</NavLink></li>
    <li><NavLink href="/subdir/Default.html">With extension</NavLink></li>
    <li><NavLink href="/subdir/Other">Other</NavLink></li>
    <li><NavLink href="Other" Match=NavLinkMatch.All>Other with base-relative URL (matches all)</NavLink></li>
    <li><NavLink href="/subdir/Other?abc=123">Other with query</NavLink></li>
    <li><NavLink href="/subdir/Other#blah">Other with hash</NavLink></li>
    <li><NavLink href="/subdir/WithParameters/Name/Abc">With parameters</NavLink></li>
    <li><NavLink href="/subdir/WithParameters/Name/Abc/LastName/McDef">With more parameters</NavLink></li>
    <li><NavLink href="/subdir/LongPage1">Long page 1</NavLink></li>
    <li><NavLink href="/subdir/LongPage2">Long page 2</NavLink></li>
    <li><NavLink>Null href never matches</NavLink></li>
</ul>

<button id="do-navigation" @onclick=@(x => NavigationManager.NavigateTo("Other"))>
    Programmatic navigation
</button>

<button id="do-navigation-forced" @onclick=@(x => NavigationManager.NavigateTo("Other", true))>
    Programmatic navigation with force-load
</button>

<a id="anchor-with-no-href">
    Anchor tag with no href attribute
</a>

<a href="/" target="_blank">Target (_blank)</a>

<a href="/subdir/NotAComponent.html">Not a component</a>
<a href="/subdir/routeablecomponentfrompackage.html">Cannot route to me</a>

<h2>Interactions with preventDefault</h2>

<p>
    Note that navigation actions are independent of event bubbling. Stopping click event propagation before
    it reaches an &lt;a&gt; element does <em>not</em> stop navigation from happening. This is by design,
    because the same is true natively in JavaScript. Navigation only responds to preventDefault.
</p>

<p __internal_preventDefault_onclick="@ancestorPreventDefault">
    <a href="about:blank" __internal_preventDefault_onclick="@targetPreventDefault">
        External navigation
        <span __internal_preventDefault_onclick="@descendantPreventDefault">[Descendant element]</span>
    </a>
</p>
<p __internal_preventDefault_onclick="@ancestorPreventDefault">
    <a href="Other" __internal_preventDefault_onclick="@targetPreventDefault">
        Internal navigation
        <span __internal_preventDefault_onclick="@descendantPreventDefault">[Descendant element]</span>
    </a>
</p>

<fieldset class="prevent-default">
    <legend>Prevent default on...</legend>
    <label><input class="ancestor" type="checkbox" @bind="ancestorPreventDefault" /> Ancestor</label>
    <label><input class="target" type="checkbox" @bind="targetPreventDefault" /> Target</label>
    <label><input class="descendant" type="checkbox" @bind="descendantPreventDefault" /> Descendant</label>

    @* So we can assert that navigation didn't happen *@
    <button class="counter" @onclick="@(() => counter++)">Counter: @counter</button>
</fieldset>

@code {
    bool ancestorPreventDefault;
    bool targetPreventDefault;
    bool descendantPreventDefault;
    int counter;
}
